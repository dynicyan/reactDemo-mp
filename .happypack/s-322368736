'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _reactRouter = require('react-router');

var _locallStorage = require('./locallStorage');

var _locallStorage2 = _interopRequireDefault(_locallStorage);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Util = function () {
    function Util() {
        (0, _classCallCheck3.default)(this, Util);

        Date.prototype.Format = function (fmt) {
            var o = {
                "M+": this.getMonth() + 1, //月份   
                "d+": this.getDate(), //日   
                "h+": this.getHours(), //小时   
                "m+": this.getMinutes(), //分   
                "s+": this.getSeconds(), //秒   
                "q+": Math.floor((this.getMonth() + 3) / 3), //季度   
                "S": this.getMilliseconds() //毫秒   
            };
            if (/(y+)/.test(fmt)) fmt = fmt.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));
            for (var k in o) {
                if (new RegExp("(" + k + ")").test(fmt)) fmt = fmt.replace(RegExp.$1, RegExp.$1.length == 1 ? o[k] : ("00" + o[k]).substr(("" + o[k]).length));
            }return fmt;
        };
    }

    (0, _createClass3.default)(Util, [{
        key: 'getThreeMonth',
        value: function getThreeMonth() {
            var now = new Date();
            var nowMonth = now.getMonth() + 1; // 当前月
            var nowYear = now.getFullYear(); // 当前年
            var _d = new Array();
            for (var i = 0; i < 3; i++) {
                _d[i] = new Object();
                if (nowMonth - i <= 0) {
                    _d[i].year = nowYear - 1;
                    if (i == 1) {
                        _d[i].show = nowYear - 1 + "-" + 12;
                        _d[i].month = 12;
                    } else if (i == 2) {
                        _d[i].show = nowYear - 1 + "-" + 11;
                        _d[i].month = 11;
                    }
                } else {
                    _d[i].show = nowYear + "-" + (nowMonth - i < 10 ? "0" + (nowMonth - i) : nowMonth - i);
                    _d[i].year = nowYear;
                    _d[i].month = nowMonth - i;
                }

                //第一天 以及最后一天
                _d[i].firstDay = "01 00:00:00";
                var dd = new Date(_d[i].year, _d[i].month, 0);
                _d[i].lastDay = dd.getDate() + " 23:59:59";
            }
            var firstday = _d[2].show + "-" + _d[0].firstDay;
            var lastDay = _d[0].show + "-" + _d[2].lastDay;
            _d.splice(0, 0, { show: "全部", type: "all", firstday: firstday, lastday: lastDay });
            console.log(_d);
            return _d;
        }
    }, {
        key: 'checkWebp',
        value: function checkWebp() {
            return new _promise2.default(function (resolve, reject) {
                if (_locallStorage2.default.getItem('webpSupport') == true) {
                    resolve(true);
                } else if (_locallStorage2.default.getItem('webpSupport') == false) {
                    resolve(false);
                } else {
                    try {
                        var bool = document.createElement('canvas').toDataURL('image/webp').indexOf('data:image/webp') == 0;
                        _locallStorage2.default.setItem('webpSupport', bool);
                        resolve(bool);
                    } catch (err) {
                        try {
                            _locallStorage2.default.setItem('webpSupport', false);
                        } catch (err) {}

                        resolve(false);
                    }
                }
            });
        }
    }, {
        key: 'CalculatGUID',
        value: function CalculatGUID() {
            var guid = "";
            for (var i = 1; i <= 32; i++) {
                var n = Math.floor(Math.random() * 16.0).toString(16);
                guid += n;
                if (i == 8 || i == 12 || i == 16 || i == 20) {
                    guid += "-";
                }
            }
            return guid;
        }
    }, {
        key: 'getQueryStringByName',
        value: function getQueryStringByName(name) {
            var result = location.hash.match(new RegExp("[\?\&]" + name + "=([^\&]+)", "i"));
            if (result == null || result.length < 1) {
                return "";
            }
            return result[1];
        }
    }, {
        key: 'setLocalStorageInfo',
        value: function setLocalStorageInfo(Key) {
            var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            if ((typeof value === 'undefined' ? 'undefined' : (0, _typeof3.default)(value)) == 'object') {
                value = (0, _stringify2.default)(value);
            }
            _locallStorage2.default.setItem(Key, value);
        }
    }, {
        key: 'getLocalStorageInfo',
        value: function getLocalStorageInfo(Key) {
            return _locallStorage2.default.getItem(Key);
        }
    }, {
        key: 'setSessionStorageInfo',
        value: function setSessionStorageInfo(Key) {
            var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            if ((typeof value === 'undefined' ? 'undefined' : (0, _typeof3.default)(value)) == 'object') {
                value = (0, _stringify2.default)(value);
            }
            window.sessionStorage.setItem(Key, value);
        }
    }, {
        key: 'getSessionStorageInfo',
        value: function getSessionStorageInfo(Key) {
            return window.sessionStorage.getItem(Key);
        }
    }, {
        key: 'needLogin',
        value: function needLogin() {
            return !!_locallStorage2.default.getItem('password') && window.sessionStorage.getItem('isLocked') != 'false';
        }
    }, {
        key: 'getCurrPath',
        value: function getCurrPath() {
            return _reactRouter.browserHistory.getCurrentLocation().pathname.replace(/^\//, '');
        }

        //获取url search参数

    }, {
        key: 'getQueryString',
        value: function getQueryString(name) {
            var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)");
            var r = window.location.search.substr(1).match(reg);
            if (r != null) return unescape(r[2]);
            return null;
        }
    }]);
    return Util;
}();

exports.default = new Util();